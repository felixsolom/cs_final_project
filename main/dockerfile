FROM python:3.9-slim-buster

WORKDIR /app

# Overwrite apt sources to use archived Buster repositories.
RUN echo "deb http://archive.debian.org/debian/ buster main contrib non-free" > /etc/apt/sources.list && \
    echo "deb http://archive.debian.org/debian/ buster-updates main contrib non-free" >> /etc/apt/sources.list && \
    echo 'Acquire::Check-Valid-Until "false";' > /etc/apt/apt.conf.d/99no-check-valid-until

# Installing system dependencies with explicit additional packages for dependency satisfaction.
RUN apt-get update && apt-get install -y \
    wget \
    git \
    unzip \
    libffi-dev \
    libopencv-dev \
    libopencv-calib3d-dev \
    libopencv-contrib-dev \
    libopencv-core-dev \
    libopencv-features2d-dev \
    libopencv-flann-dev \
    libopencv-highgui-dev \
    libopencv-imgcodecs-dev \
    libopencv-imgproc-dev \
    libopencv-ml-dev \
    libopencv-objdetect-dev \
    libopencv-photo-dev \
    libopencv-shape-dev \
    libopencv-stitching-dev \
    libopencv-superres-dev \
    libopencv-ts-dev \
    libopencv-video-dev \
    libopencv-videoio-dev \
    libopencv-videostab-dev \
    libopencv-viz-dev \
    libmagic1 \
    libtesseract-dev \
    libleptonica-dev \
    ffmpeg \
    ca-certificates \
    curl \
    build-essential \
    dpkg-dev \
    g++ \
    libc6-dev \
    libgl1-mesa-glx \
    libxi6 \
    libxrender1 \
    libxtst6 \
    libjpeg62-turbo \
    ghostscript \
    poppler-utils \
    bzip2 \
    zlib1g-dev \
    libpng-dev \
    libliff-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Remove any pre-installed Tesseract to avoid conflicts.
RUN apt-get purge -y tesseract-ocr libtesseract-dev

# Tesseract with legacy data files.
# Attempt to install version 4.1.3-1. If unavailable, fall back to the available 4.x packages.
RUN apt-get update && apt-get install -y \
    tesseract-ocr=4.1.3-1 \
    libtesseract-dev=4.1.3-1 \
    || apt-get install -y tesseract-ocr libtesseract-dev

# Download legacy language data files (compatible with Tesseract 4.x) and fix permissions.
RUN mkdir -p /usr/share/tessdata && \
    wget -O /usr/share/tessdata/eng.traineddata https://github.com/tesseract-ocr/tessdata/raw/4.00/eng.traineddata && \
    wget -O /usr/share/tessdata/osd.traineddata https://github.com/tesseract-ocr/tessdata/raw/4.00/osd.traineddata && \
    chmod -R a+rx /usr/share/tessdata



# 2. Setting environment variables for both Tesseract and JNI
ENV TESSDATA_PREFIX=/usr/share/tessdata \
    LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:/usr/lib:/usr/lib/jni:$LD_LIBRARY_PATH"



# JDK 21
RUN wget https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.3%2B9/OpenJDK21U-jdk_x64_linux_hotspot_21.0.3_9.tar.gz \
    && tar -xzf OpenJDK21U-jdk_x64_linux_hotspot_21.0.3_9.tar.gz -C /opt \
    && rm OpenJDK21U-jdk_x64_linux_hotspot_21.0.3_9.tar.gz \
    && update-alternatives --install /usr/bin/java java /opt/jdk-21.0.3+9/bin/java 1 \
    && update-alternatives --install /usr/bin/javac javac /opt/jdk-21.0.3+9/bin/javac 1

ENV JAVA_HOME=/opt/jdk-21.0.3+9

ENV JAVA_TOOL_OPTIONS="-Xmx4096m -Djava.awt.headless=true -Dorg.bytedeco.javacpp.maxbytes=3G"
ENV OMR_STEPS=GRID,HEADERS,NOTES

# Cloning Audiveris v5.4
RUN git clone https://github.com/Audiveris/audiveris.git \
    && cd audiveris \
    && git checkout tags/v5.4

WORKDIR /app/audiveris


RUN sed -i '/distributionSha256Sum/d' gradle/wrapper/gradle-wrapper.properties \
    && ./gradlew wrapper --gradle-version 8.5 --no-daemon --stacktrace \
        -Dorg.gradle.wrapper.checksum=no \
    && sed -i "1s|^|org.gradle.java.home=${JAVA_HOME}\n|" gradle.properties \
    && ./gradlew :app:clean :app:distZip -Dorg.gradle.java.home=$JAVA_HOME --info


RUN { [ -f app/build/distributions/app-*.zip ] || \
    { echo "CRITICAL ERROR: ZIP NOT FOUND"; \
      echo "Directory contents:"; \
      ls -lR app/build/; \
      exit 1; }; } \
    && echo "ZIP file exists"

# changing the binary name
RUN mkdir -p build/install/ \
    && unzip app/build/distributions/app-*.zip -d build/install/ \
    && mv build/install/app-* build/install/audiveris \
    && mv build/install/audiveris/bin/Audiveris build/install/audiveris/bin/audiveris

# verification
RUN ls -l build/install/audiveris/bin/audiveris

# Python setup
WORKDIR /app
ENV PYTHONPATH=/app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--log-level", "debug"]
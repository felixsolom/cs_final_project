FROM python:3.9-slim-buster

ENV PATH=/usr/local/bin:$PATH

WORKDIR /app

RUN echo "deb http://deb.debian.org/debian buster main contrib non-free" > /etc/apt/sources.list && \
    echo "deb http://deb.debian.org/debian buster-updates main contrib non-free" >> /etc/apt/sources.list && \
    echo "deb http://security.debian.org/debian-security buster/updates main contrib non-free" >> /etc/apt/sources.list


RUN apt-get update && apt-get dist-upgrade -y && apt-get install -y --no-install-recommends \
    build-essential \
    wget \
    git \
    unzip \
    libffi-dev \
    libopencv-dev \
    libopencv-calib3d-dev \
    libopencv-contrib-dev \
    libopencv-core-dev \
    libopencv-features2d-dev \
    libopencv-flann-dev \
    libopencv-highgui-dev \
    libopencv-imgcodecs-dev \
    libopencv-imgproc-dev \
    libopencv-ml-dev \
    libopencv-objdetect-dev \
    libopencv-photo-dev \
    libopencv-shape-dev \
    libopencv-stitching-dev \
    libopencv-superres-dev \
    libopencv-ts-dev \
    libopencv-video-dev \
    libopencv-videoio-dev \
    libopencv-videostab-dev \
    libopencv-viz-dev \
    libmagic1 \
    libleptonica-dev \
    automake \
    autoconf \
    libtool \
    pkg-config \
    ffmpeg \
    ca-certificates \
    curl \
    dpkg-dev \
    g++ \
    libc6-dev \
    libgl1-mesa-glx \
    libxi6 \
    libxrender1 \
    libxtst6 \
    libjpeg62-turbo \
    ghostscript \
    poppler-utils \
    bzip2 \
    zlib1g-dev \
    libpng-dev \
    libtiff-dev && \
    apt-mark hold libtesseract4 && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN apt-get purge -y tesseract-ocr libtesseract-dev libtesseract4 || true

# Building and install Tesseract 3.0.4 from source.
RUN wget -O tesseract-3.04.01.tar.gz https://github.com/tesseract-ocr/tesseract/archive/3.04.01.tar.gz && \
    tar -zxvf tesseract-3.04.01.tar.gz && \
    cd tesseract-3.04.01 && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    cd .. && \
    rm -rf tesseract-3.04.01* 

# simlink
RUN ln -sf /usr/local/lib/libtesseract.so.3.0.4 /usr/lib/libtesseract.so.3 && \
    ln -sf /usr/local/lib/libtesseract.so.3 /usr/lib/libtesseract.so && \
    ldconfig


RUN tesseract --version &> tesseract_version.txt


RUN cat -v tesseract_version.txt

RUN tesseract --version | awk 'NR==1 && $2 == "3.04.01" {exit 0} {exit 1}' || (echo "WRONG VERSION" && exit 1)

# Downloading legacy language data files compatible with Tesseract 3.x and install them in /usr/local/share/tessdata.
RUN mkdir -p /usr/local/share/tessdata && \
    wget -O /usr/local/share/tessdata/eng.traineddata https://raw.githubusercontent.com/tesseract-ocr/tessdata/3.04.00/eng.traineddata && \
    wget -O /usr/local/share/tessdata/osd.traineddata https://raw.githubusercontent.com/tesseract-ocr/tessdata/3.04.00/osd.traineddata && \
    wget -O /usr/local/share/tessdata/ita.traineddata https://raw.githubusercontent.com/tesseract-ocr/tessdata/3.04.00/ita.traineddata && \
    chmod -R a+rx /usr/local/share/tessdata




# env for tesseract
ENV TESSDATA_PREFIX=/usr/local/share/tessdata \
    LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH:-}"



# JDK 21
RUN wget https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.3%2B9/OpenJDK21U-jdk_x64_linux_hotspot_21.0.3_9.tar.gz \
    && tar -xzf OpenJDK21U-jdk_x64_linux_hotspot_21.0.3_9.tar.gz -C /opt \
    && rm OpenJDK21U-jdk_x64_linux_hotspot_21.0.3_9.tar.gz \
    && update-alternatives --install /usr/bin/java java /opt/jdk-21.0.3+9/bin/java 1 \
    && update-alternatives --install /usr/bin/javac javac /opt/jdk-21.0.3+9/bin/javac 1

ENV JAVA_HOME=/opt/jdk-21.0.3+9

ENV JAVA_TOOL_OPTIONS="-Xmx4096m -Djava.awt.headless=true -Dorg.bytedeco.javacpp.maxbytes=3G"
ENV OMR_STEPS=GRID,HEADERS,NOTES

RUN apt-get purge -y tesseract-ocr libtesseract-dev libtesseract4 \
    && apt-get autoremove -y || true 

# Cloning Audiveris v5.4
RUN git clone --recursive https://github.com/Audiveris/audiveris.git \
    && cd audiveris \
    && git checkout tags/v5.4

WORKDIR /app/audiveris


RUN sed -i '/distributionSha256Sum/d' gradle/wrapper/gradle-wrapper.properties \
    && ./gradlew wrapper --gradle-version 8.5 --no-daemon --stacktrace \
        -Dorg.gradle.wrapper.checksum=no \
    && sed -i "1s|^|org.gradle.java.home=${JAVA_HOME}\n|" gradle.properties \
    && ./gradlew :app:clean :app:distZip -Dorg.gradle.java.home=$JAVA_HOME --info


RUN { [ -f app/build/distributions/app-*.zip ] || \
    { echo "CRITICAL ERROR: ZIP NOT FOUND"; \
      echo "Directory contents:"; \
      ls -lR app/build/; \
      exit 1; }; } \
    && echo "ZIP file exists"


# changing the binary name
RUN mkdir -p build/install/ \
    && unzip app/build/distributions/app-*.zip -d build/install/ \
    && mv build/install/app-* build/install/audiveris \
    && mv build/install/audiveris/bin/Audiveris build/install/audiveris/bin/audiveris

COPY audiveris_fixed.sh /app/audiveris/build/install/audiveris/bin/audiveris
RUN chmod +x /app/audiveris/build/install/audiveris/bin/audiveris

# verification
RUN ls -l build/install/audiveris/bin/audiveris

# Python setup
WORKDIR /app
ENV PYTHONPATH=/app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--log-level", "debug"]